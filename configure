#!/usr/bin/env python3

import argparse
import configparser
import datetime
import collections
import logging
import os
import platform
import string
import sys


LOG = logging.getLogger()


class ErrorExit(Exception):
    pass


_EPILOG = """\
OVERRIDING DEFAULT SETTINGS
---------------------------

You can override default build settings using the `-s` command line option, in
the form `-s <setting-name>=<value>`, e.g. `-s target__build_mode=debug`. Each
setting name consists of two parts: the section name, two underscores, and the
key within that section. Letter case doesn't matter for the keys or values
except where noted.

For a full depiction of what settings are available, descriptions, allowed
values, and their defaults, see `default-build-config.ini` in the `config`
directory. You can also run the configure command with the `--show-settings`
flag, though this will only show the default values and not the documentation. 
"""

HERE = os.path.dirname(__file__)


def parse_arguments(toolchains):
    parser = argparse.ArgumentParser(
        description="Configure the MetalC library for building.",
        epilog=_EPILOG,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        fromfile_prefix_chars="@",
    )
    verbosity_group = parser.add_mutually_exclusive_group()
    verbosity_group.add_argument(
        "-v",
        "--verbose",
        dest="log_level",
        action="store_const",
        const=logging.INFO,
        default=logging.WARNING,
    )
    verbosity_group.add_argument(
        "-d", "--debug", dest="log_level", action="store_const", const=logging.DEBUG
    )
    parser.add_argument(
        "--show-settings", action="store_true", help="Show all default settings."
    )
    parser.add_argument(
        "-s",
        dest="setting_overrides",
        action="append",
        help="Override a setting value, in the form of <setting-name>=<value>.",
    )

    return parser.parse_args()


def main():
    logging.debug("Reading default build settings.")
    build_defaults = configparser.ConfigParser()
    build_defaults.read(os.path.join(HERE, "config", "default-build-config.ini"))

    logging.debug("Loading toolchain information.")
    toolchains = configparser.ConfigParser()
    toolchains.read(os.path.join(HERE, "config", "toolchains.ini"))

    args = parse_arguments(toolchains)
    logging.basicConfig(format="[%(levelname)-7s] %(message)s", level=args.log_level)

    if args.show_settings:
        for section, contents in sorted(build_defaults.items()):
            for key, value in sorted(contents.items()):
                print("%s__%s=%s" % (section.upper(), key.upper(), value))
        return


def define_variables():
    if sys.platform == "win32":
        os_ish = "windows"
        abi = "microsoft"
    elif sys.platform == "cygwin":
        os_ish = "linux"
        abi = "microsoft"
    elif sys.platform == "darwin":
        os_ish = "macos"
        abi = "gnu"
    else:
        os_ish = "linux"
        abi = "gnu"

    return {
        "REPO_ROOT": HERE,
        "HOST_PLATFORM": os_ish,
        "ABI": abi,
    }


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Killed by user.")
        sys.exit(1)
    except ErrorExit as err:
        print(str(err))
        sys.exit(2)
    except Exception as err:
        print("Unexpected error: (%s) %s" % (type(err).__name__, err))
        sys.exit(3)
    sys.exit(0)
