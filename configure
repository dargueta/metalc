#!/bin/sh

# Default settings
architecture=$(uname -p)
disable_asm=0
disk_io=1
file_io=1
term_io=1
fastcall_internals=0
shadow_stack=0
excl_fopen=0
compile_for_kernel=1
testing_mode=0
uefi_full=0
uefi_runtime=0
additional_defines=


HELP_TEXT="
USAGE:
  $0 [options]

-a <architecture>
  The target architecture to compile the library for. If not given, assumes the
  host machine's system ($architecture). Recognized values:

    amd64       Synonym for x86_64
    arm         32-bit ARM
    arm64       64-bit ARM (AArch64)
    itanium     Intel Itanium
    m68k        Motorola 68K
    mips32      32-bit MIPS
    mips64      64-bit MIPS
    ppc         32-bit PowerPC
    ppc64       64-bit PowerPC
    sparc       32-bit SPARC
    sparc64     64-bit SPARC
    x86_16      16-bit Intel x86 (8086, 186, 286)
    x86_32      32-bit Intel x86
    x86_64      64-bit Intel x86

  Not all of these are fully supported yet.

-D name[=value]
  Define a preprocessor macro.

-p <platform>
  Set the target platform. Valid values are:
    uefi-full     Full UEFI usage. Used for UEFI applications.
    uefi-runtime  Only UEFI runtime dependencies. Used by UEFI-aware kernels.
    native        (Default) Assume no underlying system.

-k
  Compile the library for use by the kernel. Mutually exclusive with -u.

-t
  Testing mode.

-u
  Compile the library for use by a userland programs. Mutually exclusive with -k.

FEATURE FLAGS
--------

You can use the -f<feature_name> and -fno-<feature_name> flags to turn features
on and off, respectively. For example, to enable use of the x86 processors'
shadow stack, pass -fshadow-stack. To disable it, pass -fno-shadow-stack. A full
list of supported features is below.

-fdisable-asm / -fno-disable-asm [default]
    Disable use of assembly-language implementations of functions.

-fdisk-io [default] / -fno-disk-io

-ffile-io [default] / -fno-file-io
    Implies -fdisk-io.

-fterm-io [default] / -fno-term-io
    Enable/disable terminal I/O (printf, etc.) If disabled, functions using the
    terminal will fail but not throw exceptions.

-ffastcall-internals / -fno-fastcall-internals [default]
    (x86_32 only) Internal functions not exposed as part of the C library will
    use the fastcall calling convention instead of the normal cdecl.

-fshadow-stack / -fno-shadow-stack [default]
    Enable or disable use of the shadow stack. Supported on 32/64-bit x86 targets
    only, and disabled by default.

-fexcl-fopen / -fno-excl-fopen [default]
    Enable or disable the C2011 'x' flag for fopen. This is off by default since
    it requires kernel support to implement.
"


while getopts ':a:D:f:hkp:tu' option
do
  case $option in
    a ) architecture=$OPTARG ;;
    D )
      additional_defines="-D$OPTARG\n$additional_defines"
      ;;
    f )
      case $OPTARG in
        disable-asm ) disable_asm=1 ;;
        disk-io ) disk_io=1 ;;
        excl-fopen ) excl_fopen=1 ;;
        fastcall-internals ) fastcall_internals=1 ;;
        file-io )
            file_io=1
            disk_io=1
            shift
        ;;
        term-io ) term_io=1 ;;
        no-disable-asm ) disable_asm=0 ;;
        no-disk-io ) disk_io=0 ;;
        no-excl-fopen ) excl_fopen=0 ;;
        no-fastcall-internals ) fastcall_internals=0 ;;
        no-file-io ) file_io=0 ;;
        no-shadow-stack ) shadow_stack=0 ;;
        no-term-io ) term_io=0 ;;
        shadow-stack )
          echo 'No support for shadow stacks yet.'
          exit 1
        ;;
        * )
          echo "Unrecognized feature flag: $OPTARG"
          exit 1
          ;;
      esac
    ;;
    h )
      echo "$HELP_TEXT"
      exit 0
      ;;
    p )
      case "$OPTARG" in
        uefi-full )
          uefi_full=1
          uefi_runtime=0
          ;;
        uefi-runtime )
          uefi_full=0
          uefi_runtime=1
          ;;
        native )
          uefi_full=0
          uefi_runtime=0
          ;;
      esac
      ;;
    k ) compile_for_kernel=1 ;;
    t ) testing_mode=1 ;;
    u ) compile_for_kernel=0 ;;
    ? )
      echo "Invalid option: -$OPTARG"
      exit 1
      ;;
  esac
done

# Handle synonyms
case "$architecture" in
  amd64 )
    architecture=x86_64 ;;
esac

# Ensure the target architecture is supported.
case "$architecture" in
  x86_32 | x86_64 )
    # Architecture is supported, nothing to do here.
    ;;
  arm | arm64 | itanium | m68k | mips32 | mips64 | ppc | ppc64 | sparc | sparc64 | x86_16 )
    echo "Architecture '$architecture' isn't completely supported yet."
    exit 1
    ;;
  * )
    echo "Unrecognized target architecture: $architecture"
    exit 1
    ;;
esac

cat <<EOF > settings.cmake
set(METALC_COMPILE_FOR_KERNEL $compile_for_kernel)
set(METALC_COMPILE_FOR_TESTING $testing_mode)
set(BUILD_TESTING $testing_mode)
set(METALC_PLATFORM_UEFI_FULL $uefi_full)
set(METALC_PLATFORM_UEFI_RUNTIME_ONLY $uefi_runtime)
set(METALC_COMPILE_OPTION_ENABLE_DISK_IO $disk_io)
set(METALC_COMPILE_OPTION_ENABLE_TERM_IO $term_io)
set(METALC_COMPILE_OPTION_ENABLE_FILE_IO $file_io)
set(METALC_COMPILE_OPTION_X86_USE_SHADOW_STACK $shadow_stack)
set(METALC_COMPILE_OPTION_DISABLE_ASM_IMPLEMENTATIONS $disable_asm)
set(METALC_INTERNALS_USE_FASTCALL $fastcall_internals)
set(TARGET_PROCESSOR "$architecture")

if (METALC_PLATFORM_UEFI_FULL OR METALC_PLATFORM_UEFI_RUNTIME_ONLY)
    set(METALC_COMPILE_OPTION_USE_EFI 1)
else()
    set(METALC_COMPILE_OPTION_USE_EFI 0)
endif()

add_definitions(
    -DMETALC_COMPILE_FOR_TESTING=$testing_mode
    -DMETALC_COMPILE_FOR_KERNEL=$compile_for_kernel
    $(echo "$additional_defines")
)

if (METALC_COMPILE_OPTION_USE_EFI EQUAL 1)
    set(METALC_COMPILE_OPTION_ENABLE_ALL_IO 1)
else()
    set(METALC_COMPILE_OPTION_ENABLE_ALL_IO 0)
endif()
EOF
