[target]
architecture = host
build_mode = debug
; Defines the C standard implemented by the library. Supported values are "ansi",
; "90", "99", and "2011". "89" is an accepted alias of "ansi".
;
; NOTE: You can only implement the highest standard supported by the compiler
; you're using to build the library. For example, if you're building this library
; using a compiler supporting C90, you cannot set this to "99".
implemented_standard = 90

[abi]
internal_fastcall = no


[features]
; Enable additional functions specific to the `long long` datatype like `strtoll`,
; `llabs`, etc. as well as the "%ll" and "%ull" set of printf formats. If the
; target platform does not support `long long`, this is setting is ignored.
;
; Adding more functions and features will make the compiled library bigger, so
; if you're not sure you're going to need `long long`s, you should probably set
; this to `no`.
;
; Disabled by default if `standard` is less than "99".
longlong_support = no

; Include the nonstandard functions `itoa`, `utoa`, `ltoa`, `ultoa`, (`lltoa`
; and `ulltoa` if `longlong_support` is true). These are declared in stdlib.h.
itoa = no

; For x86-32 and x86-64 targets only.
use_shadow_stack = no

; <BAD IDEA>
; Enable the C2011 "x" subspecifier for fopen(), which forces the function to
; fail if the file already exists instead of overwriting it.
;
; Disabled unless the kernel supports atomic exclusive creation. For security
; reasons this library only adds the O_EXCL flag to the open mode; it's up to
; the kernel to enforce it.
excl_fopen = no
; </BAD IDEA>


[kernel_support]
core_dumps = no
file_io = no
getenv = no
terminal_io = no
shell_calls = no
excl_fopen = no

; Only applies to x86-64.
red_zone = yes

; Controls implementation of memory allocation.
;
; Accepted values:
;
; `yes`
;     The kernel implements the mmap() system call. The library will use this
;     for implementing malloc() and associated functions.
;
; `no`
;      The kernel does NOT implement the mmap() system call. The library cannot
;      allocate its own memory. This will disable malloc() and its associated
;      functions, and may break a few other functions requiring temporary memory
;      such as file I/O.
;
;      In the future, this may change so that the library is built with a small
;      static buffer (e.g. 16 KiB) so internal functions can continue to work.
memory_allocation = no


[optional_libraries]
atomic = kernel_only
locale = client_only
math = client_only
signal = client_only
wchar = client_only


[constants]
stdio.bufsiz = 8192
; The maximum length of a filename, in bytes.
stdio.filename_max = 255
; The maximum number of files that a process is allowed to have open at any given
; time. This limit isn't imposed when compiling the C library in kernel mode.
stdio.fopen_max = 16
stdio.l_tmpnam = 32


[misc]
; The line terminator for text files. Allowed values are:
;
;   - "CRLF": The line ending used by Windows and no one else.
;   - "LF": The line ending used by most non-Windows operating systems.
;   - "CR" if you really feel like a troll and want to use the Macintosh II line
;     endings (early 1990s).
;
; Should you decide to use a different line terminator (highly inadvisable),
; you may make use octal character escapes. For example, "\012" is equivalent
; to "LF", "\015\012" is equivalent to "CRLF", etc.
line_ending = LF

; The character set used by the wchar functions by default (LC_CTYPE = "").
; Currently only UTF-8 is supported; UTF-16 may be added in the future for
; compatibility with Windows systems, but that's unlikely. If you don't need
; non-ASCII text, pass "ASCII" here. All wchar functions will be no-ops, and the
; compiled library will (likely) be smaller.
default_wchar_encoding = UTF_8

; Do not use.
additional_wchar_encodings =
